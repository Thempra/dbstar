/*
 * push.h
 *
 * Created by YangJianqun
 * 
 * Modified by Richard Tang <tanghongliang@hytdcom.com>
 *
 * Copyright (C) 2012  Huayuntongda  
 */
 
#ifndef PUSH_H_
#define PUSH_H_

#ifndef MAX_PATH
#define MAX_PATH 256
#endif

extern long long g_TotalBytes;  //总的已接收字节数
extern int g_rate;  //总速率（bps）
extern long long g_totalOK;  //已完整接收文件的总数
extern char g_RecvPath[MAX_PATH];  //接收总目录
extern char INITFILE[MAX_PATH]; //Initialize.xml文件注册时所用的相对路径

/* 
  * pfnNotice - 函数指针类型，用于定义指向回调函数的函数指针
  * 回调函数的原型: void callback(const char *pathname, long long size, int fileflag);
  * pathname： 节目或文件的相对路径
  * size：节目或文件的大小
  * fileflag：对于信息通道中的文件，该参数的值为push前端播放单中相应的flag值；
  *           而对于文件通道中的节目，该参数的值始终为0。 
  */
typedef void (*pfnNotice)(const char *pathname, long long size, int fileflag);

#pragma pack(1)
struct Chan
{
	int ChID;  //通道ID
	int TotalFiles; //通道已接收文件总数
	int Rate; // 通道的接收速率（bps）
	char FileName[50]; // 文件名称
	long long FileSize; // 文件总大小
	long long FileBytes; // 文件已接收字节数
};

struct ProInfo 
{
	int status;  // 节目状态
	long long Bytes;  // 节目已接收字节数
	int ChTotal;  // 节目中的总通道数
	struct Chan chan_info[10];
};
#pragma pack()

#ifdef __cplusplus
extern "C" {
#endif

/****************************************************************************
 * 函数名：push_init
 * 功  能：初始化push库
 * 输  入：conf_file，指定配置文件的绝对路径，当它的值为NULL时，
          则使用默认的配置文件/etc/push.conf。
 * 输  出：无
 * 返回值：0，初始化成功；-1，初始化失败。
 ***************************************************************************/
int push_init(const char *conf_file);


/****************************************************************************
 *函数名：push_parse
 *功  能：数据包或MPE段的解析
 *输  入：pBuf，数据包或MEP段的地址； buflen，数据包或MPE段的长度
 *输  出：无
 *返回值：0，成功解析； -1，数据包格式错误； -2，不需要的数据包； -99，其它；
          当解析MPE段时，-4，表示MPE段的CRC32校验错误。
 ***************************************************************************/
int push_parse(char *pBuf, int buflen);


/****************************************************************************
 *函数名：push_set_notice_callback
 *功  能：设置节目和信息文件接收完全后所调用的回调函数
 *输  入：cb，pfnNotice  类型的函数指针，指向回调函数
 *输  出：无
 *返回值：无
 ***************************************************************************/
void push_set_notice_callback(pfnNotice cb);


/****************************************************************************
 *函数名：push_destroy
 *功  能：退出
 *输  入：无
 *输  出：无
 *返回值：无
 ***************************************************************************/
void push_destroy(void);


/****************************************************************************
 *函数名：push_dir_register
 *功  能：注册节目，只有已注册的节目才能被接收。
 *输  入：dir，节目的相对路径，如"pushfile/1944"，前面没有'/'；
          total_bytes，节目总大小（字节数）；
          state，节目状态，0正常接收，-1禁止，-2删除。
 *输  出：无
 *返回值：>=0表示注册成功，0正常注册，1重复注册；
          <0表示注册失败，-1存储空间不足，-2参数错误。
 ***************************************************************************/
int push_dir_register(const char *dir, long long total_bytes, int state);


/****************************************************************************
 *函数名：push_dir_unregister
 *功  能：注销节目
 *输  入：dir，节目的相对路径，当dir为NULL时则表示注销所有的节目
 *输  出：无
 *返回值：0，注销成功； -1，该节目尚未注册。
 ***************************************************************************/
int push_dir_unregister(const char *dir);


/****************************************************************************
 *函数名：push_file_register
 *功  能：注册信息文件，只有已注册的信息文件才能被接收（初始化文件不需要手
          动注册，而它注册所用的相对路径则在配置文件中设置）
 *输  入：filename，信息文件的相对路径
 *输  出：无
 *返回值：>=0表示注册成功，0正常注册，1重复注册；
          <0表示注册失败，-1存储空间不足，-2参数错误。
 ***************************************************************************/
int push_file_register(const char *filename);


/****************************************************************************
 *函数名：push_file_unregister
 *功  能：注销信息文件
 *输  入：filename，信息文件的相对路径，当filename 为NULL时则注销所有的信息文件
          （这里不包括初始化文件）
 *输  出：无
 *返回值：0，注销成功； -1，该信息文件尚未注册。
 ***************************************************************************/
int push_file_unregister(const char *filename);


/****************************************************************************
 *函数名：push_dir_forbid
 *功  能：禁止接收节目
 *输  入：dir，节目的相对路径
 *输  出：无
 *返回值：0，已禁止； -1，未找到该节目； -2，参数错误。
 ***************************************************************************/
int push_dir_forbid(const char *dir);


/****************************************************************************
 *函数名：push_dir_resume
 *功  能：恢复接收节目
 *输  入：dir，节目的相对路径
 *输  出：无
 *返回值：0，已恢复接收； -1，未找到该节目； -2，参数错误。
 ***************************************************************************/
int push_dir_resume(const char *dir);


/****************************************************************************
 *函数名：push_dir_remove
 *功  能：删除指定节目，节目被删除后，将不再接收
 *输  入：dir，节目的相对路径
 *输  出：无
 *返回值：0，已删除该节目；  -1，未找到该节目； -2，参数错误。
 ***************************************************************************/
int push_dir_remove(const char *dir);


/****************************************************************************
 *函数名：push_dir_get_single
 *功  能：获取单个节目的已接收字节数
 *输  入：dir，节目的相对路径
 *输  出：无
 *返回值：>=0，已接收字节数；-1，参数错误。
 ***************************************************************************/
long long push_dir_get_single(const char *dir);


/****************************************************************************
 *函数名：push_dir_get_all
 *功  能：获取多个节目的已接收字节数
 *输  入：dirs，用于存储节目的相对路径，其中的每个元素都须要分配足够的内存；
          bytes，用于存储节目的已接收字节数；
          size，指示数组dirs和bytes的大小，也就是想要获取信息的节目数。
 *输  出：dirs，节目的相对路径； bytes，节目的已接收字节数。
 *返回值：已获取到信息的节目数
 ***************************************************************************/
int push_dir_get_all(char *dirs[], long long bytes[], int size);


/****************************************************************************
 *函数名：push_dir_get_chan
 *功  能:  获取节目及其通道信息
 *输入:  dir，节目的相对路径
 *输出:   pro_info，存储相关信息
 *返回值:   0，成功；  -1，未找到该节目； -2，参数错误；
          -3，ProInfo结构体中chan_info数组溢出。
 ***************************************************************************/
int push_dir_get_chan(const char *dir, struct ProInfo *pro_info);


#ifdef __cplusplus
}  /* End of the 'extern "C"' block */
#endif

#endif /* PUSH_H_ */
